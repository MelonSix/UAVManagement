/*******************************************************************************
 * Copyright (c) 2013-2015 Sierra Wireless and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 *    http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 *    http://www.eclipse.org/org/documents/edl-v10.html.
 * 
 * Contributors:
 *     Sierra Wireless - initial API and implementation
 *******************************************************************************/

package org.eclipse.leshan.bootstrap;

import java.net.InetSocketAddress;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.webapp.WebAppContext;
import org.eclipse.leshan.bootstrap.servlet.BootstrapServlet;
import org.eclipse.leshan.core.request.BindingMode;
import org.eclipse.leshan.server.bootstrap.BootstrapConfig;
import org.eclipse.leshan.server.bootstrap.SecurityMode;
import org.eclipse.leshan.server.bootstrap.SmsSecurityMode;
import org.eclipse.leshan.server.californium.impl.LwM2mBootstrapServerImpl;
import org.eclipse.leshan.server.security.SecurityStore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BootstrapMain {

    private static final Logger LOG = LoggerFactory.getLogger(BootstrapMain.class);

    public static void main(String[] args) throws ConfigurationChecker.ConfigurationException {

        BootstrapStoreImpl bsStore = new BootstrapStoreImpl();
        SecurityStore securityStore = new BootstrapSecurityStore(bsStore);
        setBootstrap(bsStore);
        
        // use those ENV variables for specifying the interface to be bound for coap and coaps
        String iface = System.getenv("COAPIFACE");
        String ifaces = System.getenv("COAPSIFACE");

        LwM2mBootstrapServerImpl bsServer;             
                
        if (iface == null || iface.isEmpty() || ifaces == null || ifaces.isEmpty()) {
            bsServer = new LwM2mBootstrapServerImpl(bsStore, securityStore);
        } else {
            String[] add = iface.split(":");
            String[] adds = ifaces.split(":");

            // user specified the iface to be bound
            bsServer = new LwM2mBootstrapServerImpl(new InetSocketAddress(add[0], Integer.parseInt(add[1])),
                    new InetSocketAddress(adds[0], Integer.parseInt(adds[1])), bsStore, securityStore);
        }

        bsServer.start();
        // now prepare and start jetty

        String webPort = System.getenv("PORT");

        if (webPort == null || webPort.isEmpty()) {
            webPort = System.getProperty("PORT");
        }

        if (webPort == null || webPort.isEmpty()) {
            webPort = "8080";
        }

        Server server = new Server(Integer.valueOf(webPort));
        WebAppContext root = new WebAppContext();

        root.setContextPath("/");
        // root.setDescriptor(webappDirLocation + "/WEB-INF/web.xml");
        root.setResourceBase(BootstrapMain.class.getClassLoader().getResource("webapp").toExternalForm());

        // root.setResourceBase(webappDirLocation);
        root.setParentLoaderPriority(true);

        ServletHolder bsServletHolder = new ServletHolder(new BootstrapServlet(bsStore));
        root.addServlet(bsServletHolder, "/api/bootstrap/*");

        server.setHandler(root);

        try {
            server.start();
        } catch (Exception e) {
            LOG.error("jetty error", e);
        }

    }
    
    public static BootstrapConfig.ServerConfig setUpServerConfig()
    {
        BootstrapConfig.ServerConfig serverConfig = new BootstrapConfig.ServerConfig();
        serverConfig.shortId=101;
        serverConfig.lifetime=60;
        serverConfig.defaultMinPeriod = 20;
        serverConfig.defaultMaxPeriod=60;
        serverConfig.disableTimeout =3600;
        serverConfig.notifIfDisabled = true;
        serverConfig.binding = BindingMode.U;
        serverConfig.toString();
        return serverConfig;
    }
    
    public static BootstrapConfig.ServerSecurity setUpSecurityConfig()
    {
        String password = "mypassword";
        String publicKey = "pubKey";
        BootstrapConfig.ServerSecurity serverSecurity = new BootstrapConfig.ServerSecurity();
        serverSecurity.uri = "coap://127.0.0.1:5683";
        serverSecurity.bootstrapServer = false;
        serverSecurity.securityMode = SecurityMode.PSK;
        serverSecurity.serverPublicKeyOrId = publicKey.getBytes();
        serverSecurity.publicKeyOrId = publicKey.getBytes();
        serverSecurity.secretKey = password.getBytes();
        serverSecurity.smsSecurityMode = SmsSecurityMode.PROPRIETARY;
        serverSecurity.serverSmsNumber = "00233248864955";
        serverSecurity.smsBindingKeyParam = password.getBytes();
        serverSecurity.clientOldOffTime = 50000;
        serverSecurity.smsBindingKeySecret = password.getBytes();
        serverSecurity.serverId = 101;
        return serverSecurity;
    }
    
    public static void setBootstrap(BootstrapStoreImpl bStore) throws ConfigurationChecker.ConfigurationException
    {
        BootstrapConfig bootstrapConfig = new BootstrapConfig();
        bootstrapConfig.servers.put(1, setUpServerConfig());
        bootstrapConfig.security.put(0, setUpSecurityConfig());
        bStore.addConfig("myEndpoint", bootstrapConfig);
        bStore.deleteConfig("");
    }
    
}
